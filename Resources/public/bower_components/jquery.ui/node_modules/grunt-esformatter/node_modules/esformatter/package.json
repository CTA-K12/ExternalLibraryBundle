{
  "name": "esformatter",
  "version": "0.0.11",
  "description": "ECMAScript code beautifier/formatter",
  "main": "lib/esformatter.js",
  "bin": {
    "esformatter": "./bin/esformatter"
  },
  "scripts": {
    "test": "istanbul test test/runner.js",
    "lint": "jshint lib/*.js lib/**/*.js test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/millermedeiros/esformatter.git"
  },
  "bugs": {
    "url": "https://github.com/millermedeiros/esformatter/issues"
  },
  "keywords": [
    "beautifier",
    "beautify",
    "formatter",
    "ecmascript",
    "javascript",
    "syntax",
    "source",
    "esprima"
  ],
  "author": {
    "name": "Miller Medeiros",
    "url": "http://blog.millermedeiros.com/"
  },
  "devDependencies": {
    "esprima": "1.0",
    "mocha": "https://github.com/millermedeiros/mocha/tarball/latest",
    "chai": "1.4",
    "glob": "3.1",
    "istanbul": "~0.1.23",
    "jshint": "~2.3.0"
  },
  "dependencies": {
    "mout": "~0.5",
    "rocambole": "~0.2",
    "optimist": "~0.6.0",
    "stdin": "*"
  },
  "license": "MIT",
  "readme": "# esformatter\n\n[![Build Status](https://secure.travis-ci.org/millermedeiros/esformatter.png?branch=master)](https://travis-ci.org/millermedeiros/esformatter)\n\nECMAScript code beautifier/formatter.\n\n\n\n## Important\n\nThis tool is still on early development and is missing support for many\nimportant features.\n\n**We are looking for contributors!!**\n\n\n\n## Why?\n\n[jsbeautifier.org](http://jsbeautifier.org/) doesn't have enough options and\nnot all IDEs/Editors have a good JavaScript code formatter. I would like to\nhave a command line tool (and standalone lib) as powerful/flexible as the\n[WebStorm](http://www.jetbrains.com/webstorm/) and\n[FDT](http://fdt.powerflasher.com/) code formatters.\n\nThis tool could also be reused by other node.js libs like\n[escodegen](https://github.com/Constellation/escodegen/) to format the output\n(so each lib has a single responsibility).\n\nFor more reasoning behind it and history of the project see: [esformatter\n& rocambole](http://blog.millermedeiros.com/esformatter-rocambole/)\n\n\n\n## How?\n\nThis tool uses [rocambole](https://github.com/millermedeiros/rocambole) (based\non Esprima) to recursively parse the tokens and transform it *in place*.\n\n\n\n## Goals\n\n - *granular* control about white spaces, indent and line breaks.\n - command line interface (cli).\n - be non-destructive.\n - option to control automatic semicolon insertion (asi).\n - support for local/global config file so settings can be shared between team\n   members.\n - presets for the most popular style guides (Google, jQuery, Idiomatic.js).\n - be the best JavaScript code formatter.\n\n\n\n## API\n\n### esformatter.format(str[, opts]):String\n\nSo far `esformatter` exposes 2 methods.\n\n`format()` method which receives a string containing the code that you would\nlike to format and the configuration options that you would like to use and\nreturns a string with the result.\n\n```js\nvar esformatter = require('esformatter');\n\n// for a list of available options check \"lib/preset/default.json\"\nvar options = {\n    // inherit from the default preset\n    preset : 'default',\n    indent : {\n        value : '  '\n    },\n    lineBreak : {\n        before : {\n            BlockStatement : 1,\n            DoWhileStatementOpeningBrace : 1,\n            // ...\n        }\n    },\n    whiteSpace : {\n        // ...\n    }\n};\n\nvar fs = require('fs');\nvar codeStr = fs.readFileSync('path/to/js/file.js').toString();\n\n// return a string with the formatted code\nvar formattedCode = esformatter.format(codeStr, options);\n```\n\n### esformatter.transform(ast[, opts]):AST\n\nor you can use the `transform()` method to manipulate an AST in place (allows\npipping other tools that manipulates the AST). - so far only supports\n[rocambole](https://github.com/millermedeiros/rocambole) generated ASTs, but we\nwill work to fix this limitation in the future (see [issue #86](https://github.com/millermedeiros/esformatter/issues/86)).\n\n```js\nvar inputAST = rocambole.parse('var foo=123;');\n// you can also pass the formatting options as second argument like the\n// `format` method\nvar outputAST = esformatter.transform(inputAST);\nassert(outputAST === inputAST, 'edits AST in place');\nassert(outputAST.toString() === 'var foo = 123;', 'formats input');\n```\n\n\n## CLI\n\nYou can also use the simple command line interface to process `stdin` and\n`stdout` or read from a file.\n\n```sh\nnpm install -g esformatter\n```\n\n### Usage:\n\n````sh\nesformatter [OPTIONS] [FILES]\n\nOptions:\n  -c, --config   Path to custom configuration file.\n  -p, --preset   Set style guide preset (\"jquery\", \"default\").\n  -h, --help     Display help and usage details.\n  -v, --version  Display the current version.\n````\n\n### Examples:\n\n```sh\n# format \"test.js\" and output result to stdout\nesformatter test.js\n# you can also pipe other shell commands (read file from stdin)\ncat test.js | esformatter\n# format \"test.js\" using options in \"options.json\" and output result to stdout\nesformatter --config options.json test.js\n# process \"test.js\" and writes to \"test.out.js\"\nesformatter test.js > test.out.js\n# you can override the default settings, see lib/preset/default.json for\n# a list of available options\nesformatter test.js --indent.value=\"\\t\" --lineBreak.before.IfStatementOpeningBrace=0\n```\n\n### Configuration\n\n`esformatter` will look for the closest `.esformatter` file and use that as\na setting unless you specify `--preset` or `--config`.\n\nYou also have the option to put your `esformatter` settings inside the\n`package.json` file under the `esformatter` property.\n\nSettings from multiple files will be merged until it finds a config file that\ncontains the property `\"preset\"` or `\"root\": true`; that makes it easy to\ndefine exceptions to the project rules without needing to copy all the shared\nproperties. - for an example see test files inside the `\"test/compare/rc\"`\nfolder.\n\nThe `\"preset\"` property is used to set the `prototype` of the config file,\nenabling inheritance. For instance, you can say your config inherits from the\n`jquery` preset and only override the settings you need:\n\n```json\n{\n  \"preset\": \"jquery\",\n  \"indent\": {\n    \"value\": \"  \"\n  }\n}\n```\n\nPS: the [jQuery preset](https://github.com/millermedeiros/esformatter/issues/19) is still under development.\n\n\n\n## Project structure / Contributing\n\nSee [CONTRIBUTING.md](https://github.com/millermedeiros/esformatter/blob/master/CONTRIBUTING.md)\n\n\n\n## Popular Alternatives\n\n - [jsbeautifier](http://jsbeautifier.org/)\n\n\n\n## Projects built on top of esformatter\n\n - [esformatter-diff](https://github.com/piuccio/esformatter-diff) - provides a CLI tool to check and validate a codebase\n - [sublime-esformatter](https://github.com/piuccio/sublime-esformatter) - integrates esformatter into Sublime Text\n - [grunt-esformatter](https://github.com/jzaefferer/grunt-esformatter) - provides a grunt plugin for validating and formatting your projects code formatting\n - [vim-esformatter](https://gist.github.com/nisaacson/6939960) - integrates esformatter into vim\n\n\n\n## License\n\nReleased under the MIT license\n\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/millermedeiros/esformatter",
  "_id": "esformatter@0.0.11",
  "dist": {
    "shasum": "48e12f490e60bc17effc81250c69ef7763cdf3b4"
  },
  "_from": "esformatter@0.0.11",
  "_resolved": "https://registry.npmjs.org/esformatter/-/esformatter-0.0.11.tgz"
}
